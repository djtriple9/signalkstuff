/* NOTE!!!! THIS IS NOT A SENSEESP PROGRAM!  THIS CODE OUTPUTS NMEA0183 COMPLIANT OUTPUTS DIRECTLY TO THE SERIAL PORT
 * AND SHOULD BE PLUGGED DIRECTLY INTO THE SERVER AND SET UP AS AN NMEA0183 SERIAL DEVICE. or hooked up to a TTL to RS232 device if you are hooking up to a Multiplexer or
 * directly to your chartplotter.
 * There are three serial ports on the ESP known as U0UXD, U1UXD and U2UXD.
 * 
 * U0UXD is used to communicate with the ESP32 for programming and during reset/boot.
 * U1UXD is unused and can be used for your projects. Some boards use this port for SPI Flash access though
 * U2UXD is unused and can be used for your projects.
 * 
*/
#include <QMC5883LCompass.h>
#define RXD2 16  //These are the default pins for Node MCU ESP32S serial2
#define TXD2 17
QMC5883LCompass compass;
float a;


void setup() {
  // Note the format for setting a serial port is as follows: Serial2.begin(baud-rate, protocol, RX pin, TX pin);
  Serial.begin(38400); //NMEA0183HS (high speed) standard is 38400; normal speed is 4800
  //Serial1.begin(9600, SERIAL_8N1, RXD2, TXD2); //enable only if you are using it; check you pinout docs!
  Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2);
  compass.init();
  compass.setCalibration(-2586, 2806, -2440, 3605, -5750, 2085); //run the calibration code in examples, and it will spit out a value you put here. REQUIRED FOR ACCURACY.
  }

void loop() { 
  while (Serial2.available()) { //Choose Serial1 or Serial2 as required
    Serial.print(char(Serial2.read())); //no need to tweak as the output is already NMEA0183
  }
  Serial.println();
  compass.read();
  a = compass.getAzimuth()* 0.01745329251;  //azimuth is the numerical output of your postiion as noted in degrees, 0-359.99, NMEA 0183 standard require radians  0.01745329251 is calculated as a*Pi/180
  //now to build the NMEA string for the magnetic heading (HDM)
  String HDM ="$HDM,";
  HDM += String(a);
  HDM += ",M*"; 
  byte checksum = 0; //checksum is calculated based on the hex of the count of characters minus the "$" and "*"
  for (int i = 1; i < HDM.length() - 1; i++)
  checksum ^= HDM[i];
  Serial.print(HDM);
  if (checksum < 0x10)
  Serial.print('0'); // Leading zero
  Serial.println(checksum, HEX);
 }
